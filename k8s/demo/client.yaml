apiVersion: v1
kind: Namespace
metadata:
  name: client-ns

---

kind: Service
apiVersion: v1
metadata:
  name: client
  namespace: client-ns
spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 80
  selector:
    app: client

---

# Envoy configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config
  namespace: client-ns
data:
  envoy.yaml: |
    node:
      id: "id_02"
      cluster: "cluster_02"
    # Enable admin endpoint
    admin:
      access_log_path: /tmp/admin_access0.log
      address:
        socket_address:
          protocol: TCP
          address: 127.0.0.1
          port_value: 8001
    static_resources:
      listeners:
      - name: customers_mtls_listener
        address:
          socket_address:
            address: 127.0.0.1
            port_value: 9001
        filter_chains:
          - filters:
              - name: envoy.filters.network.http_connection_manager
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  common_http_protocol_options:
                    idle_timeout: 1s
                  codec_type: auto
                  access_log:
                    - name: envoy.access_loggers.file
                      typed_config:
                        "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                        path: "/tmp/envoy-to-envoy-mtls.log"
                  stat_prefix: ingress_http
                  route_config:
                    name: service_route
                    virtual_hosts:
                      - name: client_to_customers_mtls
                        domains: ["*"]
                        routes:
                          - match:
                              prefix: "/"
                            route:
                              cluster: client_to_customers_mtls
                  http_filters:
                    - name: envoy.router
      clusters:
      - name: spire_agent
        connect_timeout: 0.25s
        http2_protocol_options: {}
        load_assignment:	
          cluster_name: spire_agent
          endpoints:	
          - lb_endpoints:	
            - endpoint:	
                address:	
                  pipe:	
                    path: /var/run/spire/sockets/api.sock
      - name: client_to_customers_mtls
        connect_timeout: 0.25s
        type: strict_dns
        lb_policy: ROUND_ROBIN
        load_assignment:	
          cluster_name: client_to_customer_mtls
          endpoints:	
          - lb_endpoints:	
            - endpoint:	
                address:	
                  socket_address:	
                    # Format {service}.{ns}
                    address: api.api-ns
                    port_value: 9001
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_certificate_sds_secret_configs:
                # expected envoy identity
                - name: "spiffe://example.org/client-proxy"
                  sds_config:
                    api_config_source:
                      api_type: GRPC
                      grpc_services:
                        envoy_grpc:
                          cluster_name: spire_agent
                      transport_api_version: V3
                    resource_api_version: V3
              combined_validation_context:
                # validate the SPIFFE ID of the server (recommended)
                default_validation_context:
                  match_subject_alt_names:
                    exact: "spiffe://example.org/api-proxy"
                validation_context_sds_secret_config:
                  name: "spiffe://example.org"
                  sds_config:
                    api_config_source:
                      api_type: GRPC
                      grpc_services:
                        envoy_grpc:
                          cluster_name: spire_agent
                      transport_api_version: V3
                    resource_api_version: V3
              tls_params:
                ecdh_curves:
                  - X25519:P-256:P-521:P-384

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: client
  namespace: client-ns
spec:
  selector:
    matchLabels:
      app: client
  replicas: 1
  template:
    metadata:
      namespace: client-ns
      labels:
        app: client
    spec:
      containers:
        # Client container
        - name: client
          image: client-service:latest-local
          args: ["run"]
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /healthy
              port: 80
            initialDelaySeconds: 30
            timeoutSeconds: 30
          ports:
            - containerPort: 80
        # Envoy container configured with a mTls connection against api
        - name: client-proxy
          image: envoyproxy/envoy:v1.17.0
          imagePullPolicy: IfNotPresent
          command: ["/usr/local/bin/envoy"]
          args: ["-c", "/run/envoy/config/envoy.yaml", "-l", "debug"]
          ports:
          - containerPort: 8001
            protocol: TCP
            name: envoy-client
          volumeMounts:
          # Mount envoy config file
          - name: envoy-config
            mountPath: /run/envoy/config
            readOnly: true
          # Mount agent socket
          - name: spire-agent-socket
            mountPath: /run/spire/sockets
            readOnly: true
      volumes:
      - name: envoy-config
        configMap:
          name: envoy-config
      - name: spire-agent-socket
        hostPath:
          path: /run/spire/agent-sockets
          type: Directory
