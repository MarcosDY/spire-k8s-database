apiVersion: v1
kind: Namespace
metadata:
  name: postgres-ns

---

apiVersion: v1
kind: Service
metadata:
  name: customer-db
  namespace: postgres-ns
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: customer-db

---

# SPIFFE Helper config file. It is configured to send reload signals to postgres
# database every time SVID rotates
apiVersion: v1
kind: ConfigMap
metadata: 
  name:  spiffe-helper-config
  namespace: postgres-ns
data: 
  helper.conf: |
    # Address to agent socket
    agentAddress = "/run/spire/sockets/api.sock"
    # Script that will reload postgres certificates when it change
    cmd = "/run/helper/reloadCertificates.sh"
    cmdArgs = ""
    # Folder to save SVID
    certDir = "/run/customer-db/certs"
    renewSignal = ""
    # Files to store SVID in PEM format
    svidFileName = "svid.crt"
    svidKeyFileName = "svid.key"
    svidBundleFileName = "root.crt"

---

apiVersion: v1
kind: ConfigMap
metadata: 
  name:  helper-reload
  namespace: postgres-ns
data: 
  reloadCertificates.sh: |
    #!/bin/bash
    psql -h /tmp/ -c 'SELECT pg_reload_conf();'

---

# Database initialization script
apiVersion: v1
kind: ConfigMap
metadata:
  name: customer-init-db
  namespace: postgres-ns
data: 
  initdb.sh: |
    # Copy configuration files
    cp /tmp/postgresql.conf /var/lib/postgresql/data
    cp /tmp/pg_hba.conf /var/lib/postgresql/data
    # Create 'symuser' and 'customer' table
    psql -U postgres demodb <<!!EOF
        CREATE USER symuser WITH encrypted password 'mypass';
        GRANT ALL privileges ON database demodb TO symuser;
        CREATE TABLE customers (id bigserial primary key, name varchar(40) NOT NULL, address text NOT NULL);
        GRANT ALL privileges ON table customers TO symuser;
        GRANT ALL privileges ON sequence customers_id_seq TO symuser;
        INSERT INTO customers (name, address) VALUES ('Roberto Sanchez', 'El mirador 1234, Parana, Entre Rios');
    !!EOF

---

# Postgres configuration files. 
# Enables ssl mode.
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: postgres-ns
data: 
  pg_hba.conf: |
    # TYPE      DATABASE        USER            ADDRESS                 METHOD
    local       all             all                                     trust
    hostnossl   all             all             0.0.0.0/0               reject
    hostssl     all             all             0.0.0.0/0               cert

  postgresql.conf: |
    listen_addresses '*'
    ssl = on
    ssl_cert_file = '/run/customer-db/certs/svid.crt'
    ssl_key_file = '/run/customer-db/certs/svid.key'
    ssl_ca_file = '/run/customer-db/certs/root.crt'

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: customer-db
  namespace: postgres-ns
spec:
  selector:
    matchLabels:
      app: customer-db
  replicas: 1
  serviceName: customer-db
  template:
    metadata:
      namespace: postgres-ns
      labels:
        app: customer-db
    spec:
      containers:
        - name: postgres-db
          image: postgres:14.0-alpine
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB 
              value: "demodb"
            # TODO: is it required?
            - name: POSTGRES_USER
              value: postgres 
            - name: POSTGRES_PASSWORD
              value: postgres
          volumeMounts:
            # Mount SVID folder
            - name: certs
              mountPath: /run/customer-db/certs
              readOnly: true
            # Share postgres socket
            - name: postgres-socket
              mountPath: /var/run/postgresql
            # Mount initdb scripts
            - name: init-db
              mountPath: /docker-entrypoint-initdb.d
            - name: postgres-config
              mountPath: /tmp
        # SPIFFE helper container. It keeps certificates updated, and rotate them on postgres
        - name: postgres-sidecar
          image: spiffe-helper:latest-local
          command: ["su", "-", "postgres", "-c", "/opt/helper/spiffe-helper -config /run/spiffe-helper/config/helper.conf"]
          imagePullPolicy: IfNotPresent
          volumeMounts:
            # Mount SPIFFE Helper config
            - name: spiffe-helper-config
              mountPath: /run/spiffe-helper/config
              readOnly: false
            # Mount script that reload postgres configurations
            - name: spiffe-helper-reload
              mountPath: /run/helper/
              readOnly: true
            # Mount SPIRE-Agent socket
            - name: spire-agent-socket
              mountPath: /run/spire/sockets
              readOnly: true
            # Share folder where SVIDs are updated
            - name: certs
              mountPath: /run/customer-db/certs
              readOnly: false
            # Mount Postgres socket, it is used to send signals
            - name: postgres-socket
              mountPath: /tmp
              readOnly: true
      volumes:
      - name: spiffe-helper-config
        configMap:
          name: spiffe-helper-config
      - name: spiffe-helper-reload
        configMap:
          name: helper-reload
          defaultMode: 0555
      - name: certs
        emptyDir: {}
      - name: spire-agent-socket
        hostPath:
          path: /run/spire/agent-sockets
          type: Directory
      - name: postgres-socket
        emptyDir: {}
      - name: init-db
        configMap:
          name: customer-init-db
      - name: postgres-config
        configMap:
          name: postgres-config
